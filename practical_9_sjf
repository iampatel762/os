#include <stdio.h>

void average(int n, int processes[][6]) {
    int w = 0;
    int t = 0;
    for (int i = 0; i < n; i++) {
        w += processes[i][5];
        t += processes[i][4];
    }
    float avg_w = (float)w / n;
    float avg_t = (float)t / n;
    printf("\nAverage Turn Around Time : %f", avg_t);
    printf("\nAverage Waiting Time : %f", avg_w);
}

void display(int n, int processes[][6]) {
    printf("\n");
    for (int i = 0; i < n; i++) {
        printf("P");
        for (int j = 0; j < 6; j++) {
            printf("%d ", processes[i][j]);
        }
        printf("\n");
    }
}

void WT(int n, int processes[][6]) {
    for (int i = 0; i < n; i++) {
        processes[i][5] = processes[i][4] - processes[i][2];
    }
    printf("\nAfter SJF:");
    display(n, processes);
    average(n, processes);
}

void TAT(int n, int processes[][6]) {
    for (int i = 0; i < n; i++) {
        processes[i][4] = processes[i][3] - processes[i][1];
    }
    WT(n, processes);
}

void CT(int n, int processes[][6]) {
    processes[0][3] = processes[0][1] + processes[0][2];
    for (int i = 1; i < n; i++) {
        if (processes[i][1] < processes[i - 1][3]) {
            processes[i][3] = processes[i - 1][3] + processes[i][2];
        } else {
            processes[i][3] = processes[i][1] + processes[i][2];
        }
    }
    TAT(n, processes);
}

void SJF(int n, int processes[][6]) {
    for (int i = 0; i < n - 1; i++) {
        for (int j = 0; j < n - i - 1; j++) {
            if ((processes[j][1] > processes[j + 1][1]) || (processes[j][1] == processes[j + 1][1] && processes[j][2] > processes[j + 1][2])) {
                for (int k = 0; k < 6; k++) {
                    int temp = processes[j][k];
                    processes[j][k] = processes[j + 1][k];
                    processes[j + 1][k] = temp;
                }
            }
        }
    }
    int max = processes[0][2];
    for (int i = 1; i < n - 1; i++) {
        for (int j = i + 1; j < n; j++) {
            if (processes[i][1] <= max && processes[j][1] <= max && processes[i][2] > processes[j][2]) {
                for (int k = 0; k < 6; k++) {
                    int temp = processes[i][k];
                    processes[i][k] = processes[j][k];
                    processes[j][k] = temp;
                }
            }
        }
        if (processes[i][2] > max) {
            max = processes[i][2];
        }
    }
    CT(n, processes);
}

int main() {
    int n;
    printf("Enter total number of processes :");
    scanf("%d", &n);
    int arr[n][6];
    for (int i = 0; i < n; i++) {
        printf("\n");
        printf("Enter details for process P%d", i + 1);
        arr[i][0] = i + 1;
        printf("\n Arrival Time:");
        scanf("%d", &arr[i][1]);
        printf(" Burst Time:");
        scanf("%d", &arr[i][2]);
        arr[i][3] = 0;
        arr[i][4] = 0;
        arr[i][5] = 0;
    }
    printf("\nBefore SJF:");
    display(n, arr);
    SJF(n, arr);
    return 0;
}
